syntax = "proto3";

enum ChitcpdMsgCode {
    /* 
     * Note: when compiled, these will generate C enums of the form
     * CHITCPD_MSG_CODE__SOCKET
     */
    INIT = 0;
    SOCKET = 1;
    BIND = 2;
    LISTEN = 3;
    ACCEPT = 4;
    CONNECT = 5;
    SEND = 6;
    RECV = 7;
    CLOSE = 8;
    GET_SOCKET_STATE = 9;
    GET_SOCKET_BUFFER_CONTENTS = 10;
    RESP = 11;
    DEBUG = 12;
    DEBUG_EVENT = 13;
    WAIT_FOR_STATE = 14;
}

enum ChitcpdConnectionType {
    COMMAND_CONNECTION = 0;
    DEBUG_CONNECTION = 1;
}

message ChitcpdMsg {
    ChitcpdMsgCode code = 1 ; /* for dispatch table */
    ChitcpdInitArgs init_args = 2; 
    ChitcpdSocketArgs socket_args = 3; 
    ChitcpdBindArgs bind_args = 4; 
    ChitcpdListenArgs listen_args = 5; 
    ChitcpdAcceptArgs accept_args = 6; 
    ChitcpdConnectArgs connect_args = 7; 
    ChitcpdRecvArgs recv_args = 8; 
    ChitcpdSendArgs send_args = 9; 
    ChitcpdCloseArgs close_args = 10;
    ChitcpdGetSocketStateArgs get_socket_state_args = 11;
    ChitcpdGetSocketBufferContentsArgs get_socket_buffer_contents_args = 12;
    ChitcpdResp resp = 13;
    ChitcpdDebugEventArgs debug_event_args = 14;
    ChitcpdWaitForStateArgs wait_for_state_args = 15;
}

message ChitcpdInitArgs {
    ChitcpdConnectionType connection_type = 1;
    ChitcpdDebugArgs debug = 2;
}

message ChitcpdDebugArgs {
    int32 sockfd = 1; /* in the future, might change to "repeated" */
    int32 event_flags = 2; /* which events to listen for */
}

message ChitcpdSocketArgs {
    int32 domain = 1;
    int32 type = 2;
    int32 protocol = 3;
}

message ChitcpdBindArgs {
    int32 sockfd = 1;
    bytes addr = 2;
}

message ChitcpdListenArgs {
    int32 sockfd = 1;
    int32 backlog = 2;
}

message ChitcpdAcceptArgs {
    int32 sockfd = 1;
}

message ChitcpdConnectArgs {
    int32 sockfd = 1;
    bytes addr = 2;
}

message ChitcpdRecvArgs {
    int32 sockfd = 1;
    int32 flags = 2;
    int32 len = 3; /* client process buffer size */
}

message ChitcpdSendArgs {
    int32 sockfd = 1;
    int32 flags = 2;
    bytes buf = 3;
}

message ChitcpdCloseArgs {
    int32 sockfd = 1;
}

message ChitcpdDebugEventArgs {
    int32 sockfd = 1;
    int32 event_flag = 2;
    int32 new_sockfd = 3;
    bool is_active = 4;    
}

message ChitcpdGetSocketStateArgs {
    int32 sockfd = 1;
}

message ChitcpdGetSocketBufferContentsArgs {
    int32 sockfd = 1;
}

message ChitcpdWaitForStateArgs {
    int32 sockfd = 1;
    int32 tcp_state = 2;
}

/* A message containing detailed information about an active chisocket */
message ChitcpdSocketState {
    int32 tcp_state = 1;
    int32 iss = 2;
    int32 irs = 3;
    int32 snd_una = 4;
    int32 rcv_nxt = 5;
    int32 snd_nxt = 6;
    int32 rcv_wnd = 7;
    int32 snd_wnd = 8;
}

/* A message containing the TCP buffer contents for an active chisocket */
message ChitcpdSocketBufferContents {
    bytes snd = 1;
    bytes rcv = 2;
}

/* A single message type encompassing all command responses */
message ChitcpdResp {
    int32 ret = 1;
    int32 error_code = 2;
    bytes addr = 3; /* for accept() */
    bytes buf = 4; /* for recv() */
    ChitcpdSocketState socket_state = 5; /* for socket_state() */
    ChitcpdSocketBufferContents socket_buffer_contents = 6; /* for buffer_contents() */

    bool has_addr = 7;
    bool has_buf = 8;
}

